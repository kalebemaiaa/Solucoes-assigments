import numpy as np
import cv2 as cv

def my_rotation(img, angulo, centro):
    matriz_translacao = np.array([[1, 0, -centro[0]],[0,1,-centro[1]],[0,0,1]])
    matriz_rotacao = np.array([[np.cos(angulo), -np.sin(angulo),0],[np.sin(angulo), np.cos(angulo),0],[0,0,1]])
    inv_translacao = np.linalg.inv(matriz_translacao)
    matriz_composicao = np.matmul(np.matmul(inv_translacao,matriz_rotacao),matriz_translacao)
    
    height, width = img.shape[:2]
    
    rotated_image = np.zeros((height,width,3), np.uint8)
    m_comp_inv = np.linalg.inv(matriz_composicao)
    
    for linr in range(height):
        for colr in range(width):
            pos_rot = np.matrix([linr, colr, 1]).T
            pos_orig = np.matmul(m_comp_inv, pos_rot)
            lin = round(pos_orig[0,0]); col = round(pos_orig[1,0]);
            
            if (lin >=0 and lin < height) and (col >= 0 and col < width):
                rotated_image[linr, colr] = img[lin,col]
                
    return rotated_image

def my_transformation(img, matriz):
    h, w = img.shape[:2]
    
    transformed_img = np.zeros((h,w,3), np.uint8)
    
    for lin in range(h):
        for col in range(w):
            coord = np.array([lin,col,1])
            new_coord = np.array([0,0])
            div = matriz[2,0] * coord[0] + matriz[2,1] * coord[1] + matriz[2,2]

            new_coord[0] = (matriz[0,0] * coord[0] + matriz[0,1] * coord[1] + matriz[0,2] ) / div
            new_coord[1] = (matriz[1,0] * coord[0] + matriz[1,1] * coord[1] + matriz[1,2] )/div
            
            if (new_coord[0] >= 0 and new_coord[0] < h) and (new_coord[1] >= 0 and new_coord[1] < w):
                transformed_img[new_coord[0], new_coord[1]] = img[lin,col]
    
    return transformed_img

def get_H(inp, out):
    A = np.zeros([8,8])
    z = [0,0,0]
    u= np.zeros((8,1))
    for i in range(4):
        line = list(inp[i]) + [1] + z + [- inp[i][0] * out[i][0], -inp[i][1] * out[i][0]]
        line_2 = z + list(inp[i]) + [1]  + [-inp[i][0] * out[i][1],-inp[i][1] * out[i][1]]
        u[i] = out[i][0]
        u[i+4] = out[i][1]
        A[i,:] = line
        A[i + 4,:] = line_2
    
    m = np.linalg.lstsq(A,u,rcond=None)
    m = np.append(m[0],1)
    
    return np.around(m.reshape([3,3]))
